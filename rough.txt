
booking schema
checkin date
checkout Data
number of guests (should i allow more guests than allowed?)
mobile no:


Cancellation Policy

Guests can cancel their reservation for a full refund up to 48 hours before check-in, provided the cancellation occurs at least 7 days before check-in.
If a guest cancels less than 7 days before check-in, they will receive a 50% refund for all nights booked.
If a guest cancels after check-in, unused nights are non-refundable.
Service fees may be non-refundable.


Ground rules
We ask every guest to remember a few simple things about what makes a great guest.
Follow the house rules
Treat your Host‚Äôs home like your own


a disabled input field with 'testuser@upi' text



what date input returns
http://127.0.0.1:3000/test?inputdate=2025-07-10



| HTTP Method | Route           | Purpose                                                  |
| ----------- | --------------- | -------------------------------------------------------- |
| `GET`       | `/bookings`     | Get all bookings (for admin or host)                 |
| `GET`       | `/bookings/:id` | Get a single booking by ID                           |
| `POST`      | `/bookings`     | **Create** a new booking                                 |
| `DELETE`    | `/bookings/:id` | **Cancel** a booking                                     |




@@@@@@@@@@@@@@@@@@@@@@@@@@

models/
listings model
user model
review
bookings

views/ 


review


routes/
/authenticate
/wishlists
/homes
/rooms/1327574080324986066
/users/profile



/listing (4 guests, 2 bedrooms, 2 beds, 2 bathrooms)

hosted by
joined date


fecilities{
#What this place offers
Bathroom
Bath
Shampoo
Body soap
Bidet
Hot water
Bedroom and laundry
Hangers
Bed linen
Extra pillows and blankets
Room-darkening blinds
Iron
Clothes storage
Entertainment
TV
Heating and cooling
Air conditioning
Ceiling fan
Heating
Home safety
Exterior security cameras on property
Outdoor entry gate camera
Fire extinguisher
First aid kit
Internet and office
Wifi
Kitchen and dining
Kitchen
Space where guests can cook their own meals
Fridge
Microwave
Cooking basics
Pots and pans, oil, salt and pepper
Dishes and cutlery
Bowls, chopsticks, plates, cups, etc.
Freezer
Cooker
Kettle
Blender
Location features
Private entrance
Separate street or building entrance
Outdoor
Patio or balcony
Parking and facilities
Free parking on premises
Lift
The home or building has a lift that‚Äôs at least 52 inches (132cm) deep and a doorway at least 32 inches (81cm) wide
Services
Pets allowed
Assistance animals are always allowed
Smoking allowed
Long-term stays allowed
Allow stays of 28 days or more
Self check-in
Smart lock
Cleaning available during stay
Not included
Unavailable: Washing machineWashing machine
Unavailable: DryerDryer
Unavailable: EssentialsEssentials
Unavailable: Smoke alarmSmoke alarm
This place may not have a smoke detector. Contact the host with any questions.
Unavailable: Carbon monoxide alarmCarbon monoxide alarm
This place may not have a carbon monoxide detector. Contact the host with any questions.
}


address
pictures
specs{
no. of guests
no. of beds
no. of bathroom
no. of bedrooms
}





About this space
Kick back and relax in this calm, stylish space. You'll be right in the heart of things when you stay at this centrally-located place with your family.

locality :

1.5km from üõí LuLu Mall
1.5 meter from üè• Medanta Hospital
200 meter from üõ£Ô∏è Sultanpur road
2km from üèüÔ∏è Pallasio mall and International cricket Stadium
Other things to note
Please Note: Couples with Local IDs are not allowed




when hosting a home

| Data Field      | Purpose                    |
| --------------- | -------------------------- |
| Title           | Headline for the stay      |
| Description     | Detailed description       |
| Property type   | House, flat, room, etc.    |
| Room type       | Entire place, private room |
| Guests          | Max guests allowed         |
| Bedrooms        | Number of bedrooms         |
| Beds            | Number of beds             |
| Bathrooms       | Number of bathrooms        |
| Amenities       | List of checkboxes         |
| Address         | Full address               |
| Price per night | Core price                 |
| Photos          | Array of images            |
| Host ID         | Who owns the listing       |
| Availability    | Dates available            |
| House rules     | Basic text                 |


Optional, but nice to have:

Security deposit
Cleaning fee
Discounts
Reviews
Map coordinates


//listing (hosting) schema

const listingSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
    trim: true,
  },
  description: {
    type: String,
    required: true,
  },
  propertyType: {
    type: String,
    required: true,
    enum: ['Apartment', 'House', 'Villa', 'Cabin', 'Other'], // add more if needed
  },
  roomType: {
    type: String,
    required: true,
    enum: ['Entire place', 'Private room', 'Shared room'],
  },
  maxGuests: {
    type: Number,
    required: true,
    min: 1,
  },
  bedrooms: {
    type: Number,
    required: true,
    min: 0,
  },
  beds: {
    type: Number,
    required: true,
    min: 0,
  },
  bathrooms: {
    type: Number,
    required: true,
    min: 0,
  },
  amenities: {
    type: [String], // e.g., ['WiFi', 'Kitchen', 'Parking']
    default: [],
  },
  address: {
    street: String,
    city: String,
    state: String,
    zip: String,
    country: String,
  },
  location: {
    lat: Number,
    lng: Number,
  },
  pricePerNight: {
    type: Number,
    required: true,
  },
  cleaningFee: {
    type: Number,
    default: 0,
  },
  photos: {
    type: [String], // array of image URLs
    default: [],
  },
  host: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  averageRating: {
    type: Number,
    default: 0,
  },
  reviewCount: {
    type: Number,
    default: 0,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
});






// review schema

{
  listing: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Listing',
    required: true,
  },
  reviewer: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  rating: {
    type: Number,
    required: true,
    min: 1,
    max: 5,
  },
  comment: {
    type: String,
    required: true,
    trim: true,
  },
  hostReply: {
    type: String,
    trim: true,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
}





// Booking Schema

const mongoose = require('mongoose');

const bookingSchema = new mongoose.Schema({
  listing: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Listing',
    required: true,
  },

  guest: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },

  checkIn: {
    type: Date,
    required: true,
  },

  checkOut: {
    type: Date,
    required: true,
  },

  guests: {
    type: Number,
    required: true,
    min: 1,
  },

  totalPrice: {
    type: Number,
    required: true,
  },

  status: {
    type: String,
    enum: ['confirmed', 'cancelled', 'pending'],
    default: 'confirmed',
  },

  createdAt: {
    type: Date,
    default: Date.now,
  },
});

module.exports = mongoose.model('Booking', bookingSchema);




// user

const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true,
  },

  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
  },

  password: {
    type: String,
    required: true,
  },

  avatar: {
    type: String, // URL to profile picture
    default: '',  // or a default placeholder
  },

  bio: {
    type: String,
    trim: true,
  },

  isHost: {
    type: Boolean,
    default: false, // regular guests by default
  },

  createdAt: {
    type: Date,
    default: Date.now,
  },
});

module.exports = mongoose.model('User', userSchema);



// wishlists

const mongoose = require('mongoose');

const wishlistSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  listing: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Listing',
    required: true,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

// Optional: to make sure a user can't save the same listing twice
wishlistSchema.index({ user: 1, listing: 1 }, { unique: true });

module.exports = mongoose.model('Wishlist', wishlistSchema);


